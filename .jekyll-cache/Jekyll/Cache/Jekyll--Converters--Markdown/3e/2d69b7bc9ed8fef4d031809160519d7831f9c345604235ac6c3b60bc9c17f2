I"ŒB<p>Mission for today: Kill nasty if statements that you don‚Äôt want to care about!</p>

<!--more-->

<h3 id="everything-starts-with-the-problem">Everything starts with the problem</h3>

<p>And I have already solved this problem! I had to map some git repo folder structure based on GitHub API response, to python dict with structure like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"folder_1_lvl_1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"folder_1_lvl_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"file_1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_2"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_3"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_3"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"folder_2_lvl_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"file_1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_2"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_3"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_3"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"folder_2_lvl_1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"folder_1_lvl_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"file_1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_2"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_3"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_3"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"folder_2_lvl_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"file_1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_2"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"file_3"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_file_name_3"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Seems quite simple, but what was my API response code (JSON below)? It‚Äôs only some part of structure above. I hope you will get the point. The main difference is type on dict in ‚Äútree‚Äù list. You can see that <em>three</em> is representing some folder and <em>blob</em> is some file. First thing is to filter this list, next is to know folder structure for every file (blob here), and we will use a ‚Äúpath‚Äù for that ü§∑‚Äç‚ôÄÔ∏è. Let‚Äôs do it simple. <code class="language-plaintext highlighter-rouge">path_list = file['path'].split('/')</code>.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"sha"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_sha"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"some_url"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tree"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"folder_1_lvl_1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"mode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"040000"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tree"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sha"</span><span class="p">:</span><span class="w"> </span><span class="s2">"another sha"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"another url"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"folder_1_lvl_1/folder_1_lvl_2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"mode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"040000"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tree"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sha"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sha"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"url"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"folder_1_lvl_1/folder_1_lvl_2/file_1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"mode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"040000"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"blob"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sha"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sha"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"url"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="a-bit-of-extra-background">A bit of extra background</h3>

<p>One thing extra before we get to the point. I assumed that folder structure in repo will correspond to structure of studies like:</p>

<pre><code class="language-txt">    semester_1
        | - course_1
                | - lab_1
                      | - excercise_1    &lt;- it is file already
                      | - excercise_2
                      | - excercise_3
                | - lab_2
                | - lab_3
        | - course_2
        | - course_3

</code></pre>

<p>So imagine the list of dictionaries with fields like <em>semester</em>, <em>course</em>, <em>lab</em>, <em>exercise</em>. Let‚Äôs make it one dict for backend response üòé</p>

<h3 id="old-way-that-worked">Old way that worked</h3>

<p>Yes, it worked, and I had no complaints about it until I got to know another approach!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">group_courses</span><span class="p">(</span><span class="n">files</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">result</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="n">result</span><span class="p">[</span><span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="k">if</span> <span class="nb">file</span><span class="p">[</span><span class="s">"lab"</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">]].</span><span class="n">keys</span><span class="p">():</span>
            <span class="n">result</span><span class="p">[</span><span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">]][</span><span class="nb">file</span><span class="p">[</span><span class="s">"lab"</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="k">if</span> <span class="nb">file</span><span class="p">[</span><span class="s">"excercise"</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">]][</span><span class="nb">file</span><span class="p">[</span><span class="s">"lab"</span><span class="p">]].</span><span class="n">keys</span><span class="p">():</span>
            <span class="n">result</span><span class="p">[</span><span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">]][</span><span class="nb">file</span><span class="p">[</span><span class="s">"lab"</span><span class="p">]][</span><span class="nb">file</span><span class="p">[</span><span class="s">"excercise"</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="s">"file"</span> <span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"excercise"</span><span class="p">],</span>
                <span class="s">"semester"</span><span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"semester"</span><span class="p">],</span>
                <span class="s">"lab"</span> <span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"lab"</span><span class="p">],</span>
                <span class="s">"course"</span> <span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">],</span>
            <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span>

</code></pre></div></div>

<h3 id="defaultdict-from-collections">DEFAULTDICT from Collections</h3>

<p>Imagine you don‚Äôt have to check whether there is such key as <em>course</em> or <em>lab</em>. It would be nice üöÄ! Below example won‚Äôt raise exception. It will automatically create simple dictionary on level below <em>defaultdict</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">file_dict</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>

<span class="c1"># won't raise KeyError
</span><span class="n">file_dict</span><span class="p">[</span><span class="s">'some_folder_lvl_1'</span><span class="p">][</span><span class="s">'some_folder_lvl_2'</span><span class="p">]</span>  <span class="o">=</span> <span class="p">{</span>
    <span class="s">"file"</span><span class="p">:</span> <span class="s">"file_name"</span>
<span class="p">}</span>

</code></pre></div></div>

<p>But what if we want to go deeper. Imagine <code class="language-plaintext highlighter-rouge">file_dict['some_folder_lvl_1']['some_folder_lvl_2']['some_folder_lvl_3]</code>, it raises <code class="language-plaintext highlighter-rouge">KeyError</code> because <em>defaultdict</em> is only on top level of our dictionary. Defaultdict with no argument acts like dict. We could do <code class="language-plaintext highlighter-rouge">my_dict = defaultdict(defaultdict(defaultdict( üëæ )))</code> but lol, nope.</p>

<p>Here comes <strong>recursive defaultdict</strong> üòé. Sounds cool enough for me!</p>

<p>Let‚Äôs just tell python to create another level of defaultdict, every time <em>KeyError</em> in basic dict would happen.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">def</span> <span class="nf">nested_dict</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">nested_dict</span><span class="p">)</span>

<span class="c1"># and above function wolud look like this now!
</span><span class="k">def</span> <span class="nf">group_courses</span><span class="p">(</span><span class="n">files</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nested_dict</span><span class="p">()</span>

    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="n">result</span><span class="p">[</span><span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">]][</span><span class="nb">file</span><span class="p">[</span><span class="s">"lab"</span><span class="p">]][</span><span class="nb">file</span><span class="p">[</span><span class="s">"excercise"</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">"file"</span> <span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"excercise"</span><span class="p">],</span>
            <span class="s">"semester"</span><span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"semester"</span><span class="p">],</span>
            <span class="s">"lab"</span> <span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"lab"</span><span class="p">],</span>
            <span class="s">"course"</span> <span class="p">:</span> <span class="nb">file</span><span class="p">[</span><span class="s">"course"</span><span class="p">],</span>
        <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<p>And you know what? Result is the same but how much fewer places to make mistake! How much less if statements that I understood only at the time of writing! I like it a lot!</p>

<p>If you want some fancy details about defaultdict, check out <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict">docs</a>. Basically the idea here is to handle <code class="language-plaintext highlighter-rouge">KeyError</code> and supply dict with some default variable. And here it is even recursive!</p>

<hr />

<p>Main credits for <a href="https://patternite.com/users/d5a991ecf2/duncster">Duncaster</a> from Patternite as I found this idea in his <a href="https://patternite.com/patterns/4ec8658c96/automatically-create-nested-dictionaries-python">article</a> first.</p>
:ET