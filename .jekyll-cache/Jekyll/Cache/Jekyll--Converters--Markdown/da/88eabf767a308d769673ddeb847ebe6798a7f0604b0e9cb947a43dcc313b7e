I"
&<p>In my recent work I found that if I don‚Äôt set everything up for triggering unit tests quickly, there is no chance for any TDD. This post is a snippet for future me, how to set everything up in VS Code.</p>

<!--more-->

<p><strong>Stuff we will use:</strong></p>

<ol>
  <li>Pytest</li>
  <li>Pytest-cov</li>
  <li><a href="https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters">Coverage Gutters</a> ‚Äî VS Code extension</li>
</ol>

<p><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension</a> will be needed too, but I assume you already have it if you read it. Pytest is using unittest module so don‚Äôt bother if you have been using unittest only.</p>

<h3 id="installation">Installation</h3>

<pre><code class="language-txt">pip install pytest
pip install pytest-cov
</code></pre>

<p>To install extension: type ‚ÄúCoverage Gutters‚Äù in VS Code extension panel. Install it.</p>

<p><img src="https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/setup_unit_tests_1.png?raw=true" alt="Coverage_gutters_extension" /></p>

<h3 id="we-want-them-to-work-quickly">We want them to work quickly</h3>

<p>The Whole point is that if you start coding, there will always be something more important to do or check than setup first unit test. Let‚Äôs do it as first and foremost thing. After that, find shortcuts that you like. I will show you how to set up them.</p>

<h3 id="add-dummy-test">Add dummy test</h3>

<p>Move your code to ‚Äòsrc‚Äô directory and tests to ‚Äòtest‚Äô directory.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># src/main_module.py
</span>
<span class="k">class</span> <span class="nc">MagicModule</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">makeMagic</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"dummy response"</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test/test_main_funcionality.py
</span>
<span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">from</span> <span class="nn">src.main_module</span> <span class="kn">import</span> <span class="n">MagicModule</span>

<span class="k">class</span> <span class="nc">FooTestCase</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">cut</span> <span class="o">=</span> <span class="n">MagicModule</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">test_foo_test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">cut</span><span class="p">.</span><span class="n">makeMagic</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">assertEqual</span><span class="p">(</span> <span class="n">resp</span><span class="p">,</span> <span class="s">"dummy response"</span><span class="p">)</span>

</code></pre></div></div>

<h3 id="time-to-run-it">Time to run it</h3>

<p>The way to run those tests is typing <code class="language-plaintext highlighter-rouge">pytest</code> in console. You can use <code class="language-plaintext highlighter-rouge">-q</code> flag too for shorter response. You should see something like this.</p>

<pre><code class="language-txt">=========================== test session starts ===========================
platform win32 -- Python 3.8.2, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdirectory: C:\DEV\SAMPLE_PROJECT
plugins: cov-2.11.1
collected 1 item

test\test_main_funcionality.py .                                     [100%]

============================ 1 passed in 0.26s ============================
</code></pre>

<p>But I still want it to work faster. I think the best way to remember that we should run tests and write them is to use muscle memory! Just use shortcut. I set it to <code class="language-plaintext highlighter-rouge">Alt+t</code>. If you have Python extension go to Keyboard Shortcuts settings (F1 + type ‚Äòkeyboard shortcuts‚Äô) and then type ‚ÄòRun tests‚Äô. You should find a ‚ÄòPython: Run All Tests‚Äô. Set it to whatever shortcut you want.</p>

<p>Now press your shortcut. When run for the first time you should see something like this.</p>

<p><img src="https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/setup_unit_tests_2.png?raw=true" alt="coverage_gutters_extension" /></p>

<p>Follow the steps to configure it for workspace. I chose pytest and test folder which contains my tests.</p>

<p>Run it again and check if no errors occur.</p>

<h3 id="error">ERROR</h3>

<p>Here is the place where I bumped into a problem. I had error message telling me that <code class="language-plaintext highlighter-rouge">src.main_module.MagicModule</code> cannot be imported in <code class="language-plaintext highlighter-rouge">test_main_funcionality.py</code> file. WTF? It worked 3 minutes ago.</p>

<p>Found solution <a href="https://stackoverflow.com/questions/41748464/pytest-cannot-import-module-while-python-can">here</a>. Just add <code class="language-plaintext highlighter-rouge">__init__.py</code> file to test directory.</p>

<p>When added it should work. You should see all tests green.</p>

<p><img src="https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/setup_unit_tests_3.png?raw=true" alt="coverage_gutters_extension" /></p>

<h3 id="coverage">Coverage</h3>

<p>Ok, we have our shortcut for running tests. Now let‚Äôs add one to run them with coverage.</p>

<p>You can just simply use <code class="language-plaintext highlighter-rouge">pytest --cov=src test --cov-report term</code>. It will generate a <code class="language-plaintext highlighter-rouge">.coverage</code> file too. The output should be like:</p>

<pre><code class="language-txt">========================== test session starts ==========================
platform win32 -- Python 3.8.2, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdirectory: C:\DEV\SAMPLE_PROJECT
plugins: cov-2.11.1
collected 1 item

test\test_main_funcionality.py                                     [100%]

----------- coverage: platform win32, python 3.8.2-final-0 -----------
Name                 Stmts   Miss  Cover
----------------------------------------
src\main_module.py       5      0   100%
----------------------------------------
TOTAL                    5      0   100%


=========================== 1 passed in 0.41s ===========================
</code></pre>

<p>But still, I want it faster! First thing to do is to visualize them. Here comes an extension we installed previously. The Coverage Gutters. It will take data from ‚Äò.coverage‚Äô file and visualize it into your code. <em>Remember, it needs XML file with those data</em>. Use <code class="language-plaintext highlighter-rouge">pytest --cov=src test --cov-report xml:coverage.xml</code> to generate such. If you still want to view results in console, you can add <code class="language-plaintext highlighter-rouge">--cov-report term</code> too.</p>

<p>Remember to click <code class="language-plaintext highlighter-rouge">watch</code> button on the bottom bar. Now you can see your coverage.</p>

<p><img src="https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/setup_unit_tests_4.png?raw=true" alt="coverage_gutters_extension" /></p>

<h3 id="make-some-custom-shortcut-for-this-command">Make some custom shortcut for this command</h3>

<p>So far, I have not found the official method to add such custom commands, but I found a walk around.</p>

<p>Go to Keyboard Shortcuts again. Open them in JSON file. Add your extra key binding. My is <code class="language-plaintext highlighter-rouge">ctrl+alt+t</code>. It will send command to integrated terminal. Remember to add <code class="language-plaintext highlighter-rouge">\n</code> at the end. This will trigger the command.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+alt+t"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.terminal.sendSequence"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pytest --cov=src test --cov-report xml:coverage.xml --cov-report term</span><span class="se">\n</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Now there is no excuse for not doing TDD üëå.</p>
:ET