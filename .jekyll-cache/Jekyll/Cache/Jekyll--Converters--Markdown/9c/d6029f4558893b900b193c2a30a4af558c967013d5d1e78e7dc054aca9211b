I"q<p>One year passed since the very first post here. And half from the last one xd. Time to get cracking!
Last year was huge in the crypto space. I sank into it too. The more Iâ€™m learning (losing money), the more Iâ€™am into it. So here we are learning solidity and having fun!</p>

<p>The starting point is always the same: some tutorial. Letâ€™s give some kudos to <a href="https://www.youtube.com/channel/UCY0xL8V6NzzFcwzHCgB8orQ">Dapp Univeristy</a> for making a lot of them!</p>

<p>Tbh, during writing this post Iâ€™m following <a href="https://www.youtube.com/watch?v=ir-IRmMTG4Q&amp;list=PLS5SEs8ZftgULF-lbxy-is9x_7mTMHFIN&amp;index=2">real world ico</a> tutorial but Iâ€™ll do my best to not just copy n paste.</p>

<p>letâ€™s start!</p>

<p>oh.. one more. My code is <a href="https://github.com/JakubSzwajka/ethereum_ico">here</a>!</p>

<h2 id="ico">ICO?</h2>

<p>A little bit of theory. ICO (Initial Coin offering) is the way of raising capital by companies. You give them money, they give tokens. And that is basicaly it. So the goal is to create some token for you and let you pay me for it with BTC for example. Whoooa!</p>

<h2 id="basics">Basics</h2>

<p>Since this is my first solidity project, I think it is worth to wrote down some basic commands and terms to be remembered.</p>

<ul>
  <li>Frameworks to make life easier. <a href="https://trufflesuite.com/">Truffle</a></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> truffle
</code></pre></div></div>

<p>Then you can check your truffle version with: <code class="language-plaintext highlighter-rouge">truffle version</code>. It will print some more information witch is quite useful.</p>

<pre><code class="language-txt">Truffle v5.5.7 (core: 5.5.7)
Ganache v^7.0.3
Solidity v0.5.16 (solc-js)
Node v17.8.0
Web3.js v1.5.3
</code></pre>

<p>To initialize project: <code class="language-plaintext highlighter-rouge">truffle init</code></p>

<p>To compile project: <code class="language-plaintext highlighter-rouge">truffle compile</code></p>

<p>To migrate: <code class="language-plaintext highlighter-rouge">truffle migrate</code></p>

<ul>
  <li>You need some ethereum based blockchain on your machine and cli for it. It would be nice to test everything locally.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> ganache-cli
</code></pre></div></div>

<p>To run blockchain with ganache: <code class="language-plaintext highlighter-rouge">ganache-cli</code>. Bum! blockchain running!</p>

<p>Extra note:</p>

<p>I had some problems while migrating my contracts to ganache. I couldnâ€™t connect with it. Running ganache-cli with specified port and host was helpful. Consider using <code class="language-plaintext highlighter-rouge">ganache-cli -h localhost -p 8545</code>.</p>

<ul>
  <li>openzeppelin-solidity - helpfull af</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>openzeppelin-solidity <span class="nt">--save-dev</span>
</code></pre></div></div>

<h2 id="the-token">The token</h2>

<p>Thanks to openzeppelin-solidity, creating token based on ERC20 is just inheriting from ERC20 class. Mine will be called BonkToken. Donâ€™t ask me why :)</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: MIT
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="mf">0.8</span><span class="p">.</span><span class="mi">13</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol"</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">BonkToken</span> <span class="k">is</span> <span class="n">ERC20</span><span class="p">{</span>
    <span class="k">constructor</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_name</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">_symbol</span><span class="p">)</span> 
    <span class="n">ERC20</span><span class="p">(</span><span class="n">_name</span><span class="p">,</span> <span class="n">_symbol</span><span class="p">)</span>
    <span class="p">{</span>

    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>And that is basicaly it. Since Iâ€™m extra new to solidity it is maybe worth to explain the constructor or its syntax. It is about taking BonkToken constructor params and passing them to ERC20 constructor.</p>

<h2 id="migration">Migration</h2>

<p>Migration is basicly specifying how your contract should be deployed into the network. Network params are specified in truffle-config.js file.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">const</span> <span class="n">BonkToken</span> <span class="o">=</span> <span class="n">artifacts</span><span class="p">.</span><span class="nb">require</span><span class="p">(</span><span class="s">"./BonkToken.sol"</span><span class="p">);</span>

<span class="n">module</span><span class="p">.</span><span class="n">exports</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">deployer</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">const</span> <span class="n">_name</span> <span class="o">=</span> <span class="s">"Bonk Token"</span><span class="p">;</span>
    <span class="n">const</span> <span class="n">_symbol</span> <span class="o">=</span> <span class="s">"BNK"</span><span class="p">;</span>
    <span class="n">deployer</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span><span class="n">BonkToken</span><span class="p">,</span> <span class="n">_name</span><span class="p">,</span> <span class="n">_symbol</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>
<p>After defining migration, run <code class="language-plaintext highlighter-rouge">truffle migrate</code>.</p>

<h2 id="playing-with-token">Playing with token</h2>

<p>To get access to truffle console, run <code class="language-plaintext highlighter-rouge">truffle console</code></p>

<p>Then in console:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># deployed token to network</span>
BonkToken.deployed<span class="o">(</span> <span class="o">)</span>.then<span class="o">((</span>t<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>token <span class="o">=</span> t<span class="o">})</span>

token.address

token.name

token.symbol
</code></pre></div></div>
:ET