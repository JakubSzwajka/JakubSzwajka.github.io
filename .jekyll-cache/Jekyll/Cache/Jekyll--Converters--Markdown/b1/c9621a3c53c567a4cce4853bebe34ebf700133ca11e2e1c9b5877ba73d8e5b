I"NO<p>The idea is to gather all information how to set up API endpoints based on model in Django and create some kind of cheat sheet.</p>

<!--more-->

<p>To make it work in Django, we need three things. Some kind of <strong>Model</strong> with <strong>serializer</strong> and the <strong>View</strong>. Then we plug it to url and voilÃ ! Letâ€™s make it step by step.</p>

<h2 id="model">Model</h2>

<p>Nothing fancy here, just an Article. Skip to the next point ðŸ˜‰.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="n">models</span><span class="p">.</span><span class="n">py</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">get_user_model</span>

<span class="n">UserModel</span> <span class="o">=</span> <span class="n">get_user_model</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">UserModel</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">SET_NULL</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="serializer">Serializer</h2>

<p>Serializer is a class that will convert our model instance to JSON and back. I donâ€™t want to focus on how it works but below you can find some functionalities of <code class="language-plaintext highlighter-rouge">rest_framework serializers</code>.</p>

<h3 id="do-not-specify-all-fields">Do not specify all fields</h3>

<p>Use <code class="language-plaintext highlighter-rouge">__all__</code> when you want to serialize all fields</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="n">serializers</span><span class="p">.</span><span class="n">py</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Article</span>

<span class="k">class</span> <span class="nc">ArticleSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">"__all__"</span>

<span class="p">{</span>
    <span class="s">"id"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s">"title"</span><span class="p">:</span> <span class="s">"sample title 1"</span><span class="p">,</span>
    <span class="s">"text"</span><span class="p">:</span> <span class="s">"sample article text"</span><span class="p">,</span>
    <span class="s">"author"</span><span class="p">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="exclude">Exclude</h3>

<p>If you want to exclude single field (ex. password) you can use <code class="language-plaintext highlighter-rouge">exclude = [list of fields to exclude ]</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticleSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
        <span class="n">exclude</span> <span class="o">=</span> <span class="p">[</span><span class="s">"author"</span><span class="p">]</span>

<span class="p">{</span>
    <span class="s">"id"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s">"title"</span><span class="p">:</span> <span class="s">"sample title 1"</span><span class="p">,</span>
    <span class="s">"text"</span><span class="p">:</span> <span class="s">"sample article text"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="depth">Depth</h3>

<p>Response is supplied with author PK. If we want to get more details about fields specified as foreign key, use <code class="language-plaintext highlighter-rouge">depth = 1</code>.
Then it will serialize one level more. If author model will have some foreign key field too and depth will be equal to 2, it will be serialized too.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticleSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">"__all__"</span>
        <span class="n">depth</span> <span class="o">=</span> <span class="mi">1</span>

<span class="p">{</span>
  <span class="s">"id"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="s">"title"</span><span class="p">:</span> <span class="s">"sample title 1"</span><span class="p">,</span>
  <span class="s">"text"</span><span class="p">:</span> <span class="s">"sample article text"</span><span class="p">,</span>
  <span class="s">"author"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s">"id"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="s">"last_login"</span><span class="p">:</span> <span class="s">"2021-06-14T07:19:30.612463Z"</span><span class="p">,</span>
      <span class="s">"is_superuser"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
      <span class="s">"username"</span><span class="p">:</span> <span class="s">"admin"</span><span class="p">,</span>
      <span class="s">"first_name"</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span>
      <span class="s">"last_name"</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span>
      <span class="s">"email"</span><span class="p">:</span> <span class="s">"admin@example.com"</span><span class="p">,</span>
      <span class="s">"is_staff"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
      <span class="s">"is_active"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
      <span class="s">"date_joined"</span><span class="p">:</span> <span class="s">"2021-06-14T07:13:58.546066Z"</span><span class="p">,</span>
      <span class="s">"groups"</span><span class="p">:</span> <span class="p">[],</span>
      <span class="s">"user_permissions"</span><span class="p">:</span> <span class="p">[]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="reverse-serialization">Reverse Serialization</h3>

<p>Imagine that you want to make serializer for User model and know what Articles he wrote. Since User Model hasnâ€™t any field like â€˜articlesâ€™ and Article model has relation to User Model in â€˜authorâ€™ field, we can specify fields in User Model serializer like:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">"id"</span><span class="p">,</span> <span class="s">"all other fields"</span><span class="p">,</span> <span class="s">"article_set"</span> <span class="p">)</span>
</code></pre></div></div>

<p>For better understanding try it out in the Django shell.</p>

<pre><code class="language-txt">&gt;&gt;&gt; from django.contrib.auth import get_user_model
&gt;&gt;&gt; UserModel = get_user_model()
&gt;&gt;&gt; admin = UserModel.objects.all( )[0]
&gt;&gt;&gt; admin
&lt;User: admin&gt;
&gt;&gt;&gt; admin.email
'admin@example.com'
&gt;&gt;&gt; admin.articles_set.all( )
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in &lt;module&gt;
AttributeError: 'User' object has no attribute 'articles_set'
&gt;&gt;&gt; admin.article_set.all( )
&lt;QuerySet [&lt;Article: Article object (1)&gt;, &lt;Article: Article object (2)&gt;, &lt;Article: Article object (3)&gt;]&gt;
</code></pre>

<h2 id="views">Views</h2>

<p>To generate views for the model I will use <a href="https://www.django-rest-framework.org/api-guide/generic-views/">generic views</a>.</p>

<p>To make it work we need to create a class which will inherit from <code class="language-plaintext highlighter-rouge">GenericViewSet</code> and classes that implements methods POST, GET, PUT, PATCH, DELETE.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.mixins</span> <span class="kn">import</span> <span class="n">RetrieveModelMixin</span><span class="p">,</span> <span class="n">ListModelMixin</span><span class="p">,</span> <span class="n">UpdateModelMixin</span><span class="p">,</span> <span class="n">CreateModelMixin</span><span class="p">,</span> <span class="n">DestroyModelMixin</span>
<span class="kn">from</span> <span class="nn">rest_framework.viewsets</span> <span class="kn">import</span> <span class="n">GenericViewSet</span>


<span class="k">class</span> <span class="nc">ArticleView</span><span class="p">(</span><span class="n">GenericViewSet</span><span class="p">,</span> <span class="p">.....</span> <span class="p">):</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ArticleSerializer</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Article</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>

</code></pre></div></div>

<p>Donâ€™t forget to add <code class="language-plaintext highlighter-rouge">serializer_class</code> field and <code class="language-plaintext highlighter-rouge">queryset</code> field. Alternatively you can define <code class="language-plaintext highlighter-rouge">get_queryset( )</code> method or <code class="language-plaintext highlighter-rouge">get_serializer_class( )</code>.</p>

<h3 id="list-view">List View</h3>

<p>Adds method GET to our View to list all resources (queryset). To override or extend behavior use: <code class="language-plaintext highlighter-rouge">.list(request, *args, **kwargs)</code> method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GET</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">articles</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="n">views</span><span class="p">.</span><span class="n">py</span>
<span class="k">class</span> <span class="nc">ArticleView</span><span class="p">(</span><span class="n">GenericViewSet</span><span class="p">,</span> <span class="n">ListModelMixin</span><span class="p">):</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ArticleSerializer</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Article</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="detail-view-retrieve-view">Detail View (Retrieve view)</h3>

<p>Adds method GET to our View which provides detail information about single entity. To override or extend behavior use: <code class="language-plaintext highlighter-rouge">.retrieve(request, *args, **kwargs)</code> method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GET</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">articles</span><span class="o">/</span><span class="p">{</span><span class="n">article</span> <span class="n">pk</span><span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="n">views</span><span class="p">.</span><span class="n">py</span>
<span class="k">class</span> <span class="nc">ArticleView</span><span class="p">(</span><span class="n">GenericViewSet</span><span class="p">,</span> <span class="n">RetrieveModelMixin</span><span class="p">):</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ArticleSerializer</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Article</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="update-view">Update View</h3>

<p>Adds two methods to our View. PUT and PATCH. Use PUT request to update all fields and PATCH request as partial update. To override or extend behavior use: <code class="language-plaintext highlighter-rouge">.update(request, *args, **kwargs)" method or ".partial_update(request, *args, **kwargs)</code> for PATCH.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PUT</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">articles</span><span class="o">/</span><span class="p">{</span><span class="n">article</span> <span class="n">pk</span><span class="p">}</span>
<span class="n">body</span><span class="p">:</span> <span class="n">data</span> <span class="n">to</span> <span class="n">update</span> <span class="k">as</span> <span class="n">json</span> <span class="n">representation</span> <span class="n">of</span> <span class="n">obj</span><span class="p">.</span>

<span class="n">PATCH</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">articles</span><span class="o">/</span><span class="p">{</span><span class="n">article</span> <span class="n">pk</span><span class="p">}</span>
<span class="n">body</span><span class="p">:</span> <span class="n">data</span> <span class="n">to</span> <span class="n">update</span> <span class="k">as</span> <span class="n">json</span> <span class="k">with</span> <span class="n">fields</span> <span class="n">we</span> <span class="n">want</span> <span class="n">to</span> <span class="n">update</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticleView</span><span class="p">(</span><span class="n">GenericViewSet</span><span class="p">,</span> <span class="n">UpdateModelMixin</span><span class="p">):</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ArticleSerializer</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Article</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="create-view">Create View</h3>

<p>Adds method POST to view. To override or extend behavior use: <code class="language-plaintext highlighter-rouge">.create(request, *args, **kwargs)</code> method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">POST</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">articles</span>
<span class="n">body</span><span class="p">:</span> <span class="n">json</span> <span class="n">representation</span> <span class="n">of</span> <span class="n">obj</span> <span class="n">to</span> <span class="n">create</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticleView</span><span class="p">(</span><span class="n">GenericViewSet</span><span class="p">,</span> <span class="n">CreateModelMixin</span><span class="p">):</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ArticleSerializer</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Article</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="destroy-view">Destroy View</h3>

<p>Adds method DELETE to view. Provides deletion of model instance. To override or extend behavior use: <code class="language-plaintext highlighter-rouge">.destroy(request, *args, **kwargs)</code> method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DELETE</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">articles</span><span class="o">/</span><span class="p">{</span><span class="n">article</span> <span class="n">pk</span><span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticleView</span><span class="p">(</span><span class="n">GenericViewSet</span><span class="p">,</span> <span class="n">DestroyModelMixin</span><span class="p">):</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ArticleSerializer</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Article</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<p>I will update this post when I will find something noteworthy.</p>
:ET