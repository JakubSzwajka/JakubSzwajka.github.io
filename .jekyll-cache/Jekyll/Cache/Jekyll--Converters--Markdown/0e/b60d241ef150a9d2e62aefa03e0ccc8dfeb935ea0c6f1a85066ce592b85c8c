I"AO<p>One year passed since the very first post here. And half from the last one xd. Time to get cracking!
Last year was huge in the crypto space. I sank into it too. The more I’m learning (losing money), the more I’am into it. So here we are learning solidity and having fun!</p>

<p>The starting point is always the same: some tutorial. Let’s give some kudos to <a href="https://www.youtube.com/channel/UCY0xL8V6NzzFcwzHCgB8orQ">Dapp Univeristy</a> for making a lot of them! I’m following <a href="https://www.youtube.com/watch?v=ir-IRmMTG4Q&amp;list=PLS5SEs8ZftgULF-lbxy-is9x_7mTMHFIN&amp;index=2">real world ico</a> tutorial but this part is only about creating Token with a few extra changes.</p>

<p>let’s start!</p>

<p>oh.. one more. My code is <a href="https://github.com/JakubSzwajka/ethereum_ico">here</a>!</p>

<h2 id="ico">ICO?</h2>

<p>A little bit of theory. ICO (Initial Coin offering) is the way of raising capital by companies. You give them money, they give you tokens. And that is basicaly it. So the goal is to create some token for you and let you pay me for it with BTC for example. Whoooa!</p>

<h2 id="some-basics">Some basics</h2>

<p>Since this is my first solidity project, I think it is worth to wrote down some basic commands and terms to be remembered.</p>

<p><strong>Frameworks to make life easier. <a href="https://trufflesuite.com/">Truffle</a></strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> truffle
</code></pre></div></div>

<p>Then you can check your truffle version with: <code class="language-plaintext highlighter-rouge">truffle version</code> command. It will print some more information witch is quite useful.</p>

<pre><code class="language-txt">Truffle v5.5.7 (core: 5.5.7)
Ganache v^7.0.3
Solidity v0.5.16 (solc-js)
Node v17.8.0
Web3.js v1.5.3
</code></pre>
<p>To initialize project structure run: <code class="language-plaintext highlighter-rouge">truffle init</code></p>

<p><strong>You need some ethereum based blockchain on your machine and cli for it. It would be nice to test everything locally.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> ganache-cli
</code></pre></div></div>

<p>To run blockchain with ganache: <code class="language-plaintext highlighter-rouge">ganache-cli</code>. Bum! blockchain running!</p>

<p>Extra note:</p>

<p>I had some problems while migrating my contracts to ganache. I couldn’t connect with it. Running ganache-cli with specified port and host was helpful. Consider using <code class="language-plaintext highlighter-rouge">ganache-cli -h localhost -p 8545</code>.</p>

<h2 id="the-token">The token</h2>

<p>Thanks to openzeppelin-solidity, creating token based on ERC20 is just inheriting from ERC20 class. Mine will be called BonkToken. Don’t ask me why :)</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: MIT
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="mf">0.8</span><span class="p">.</span><span class="mi">13</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol"</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">BonkToken</span> <span class="k">is</span> <span class="n">ERC20</span><span class="p">{</span>
    <span class="k">constructor</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_name</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">_symbol</span><span class="p">)</span> 
    <span class="n">ERC20</span><span class="p">(</span><span class="n">_name</span><span class="p">,</span> <span class="n">_symbol</span><span class="p">)</span>
    <span class="p">{</span>

    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>And that is basicaly it ;) You can now run <code class="language-plaintext highlighter-rouge">truffle compile</code> to check if everything is ok!</p>

<h2 id="migration">Migration</h2>

<p>Migration is basicly specifying how your contract should be deployed into the network. Network params are specified in truffle-config.js file.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">const</span> <span class="n">BonkToken</span> <span class="o">=</span> <span class="n">artifacts</span><span class="p">.</span><span class="nb">require</span><span class="p">(</span><span class="s">"./BonkToken.sol"</span><span class="p">);</span>

<span class="n">module</span><span class="p">.</span><span class="n">exports</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">deployer</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">const</span> <span class="n">_name</span> <span class="o">=</span> <span class="s">"Bonk Token"</span><span class="p">;</span>
    <span class="n">const</span> <span class="n">_symbol</span> <span class="o">=</span> <span class="s">"BNK"</span><span class="p">;</span>
    <span class="n">deployer</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span><span class="n">BonkToken</span><span class="p">,</span> <span class="n">_name</span><span class="p">,</span> <span class="n">_symbol</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>
<p>After defining migration, run <code class="language-plaintext highlighter-rouge">truffle migrate</code>.</p>

<h2 id="tests">Tests</h2>

<p>Since I’m new to solidity and JS too actually, I was writing my tests based on <a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.test.js">openzeppelin mostly</a> and some tutorial tips.</p>

<p>So the basic test for name and symbol of our token should look like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">BonkToken</span> <span class="o">=</span> <span class="nx">artifacts</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">BonkToken</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">expect</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">contract</span><span class="p">(</span><span class="dl">'</span><span class="s1">BonkToken</span><span class="dl">'</span><span class="p">,</span> <span class="nx">accounts</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">_name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Bonk Token</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">_symbol</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">BNK</span><span class="dl">'</span><span class="p">;</span> 

    <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">token attributes</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

        <span class="nx">beforeEach</span><span class="p">(</span><span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">token</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">BonkToken</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="nx">_name</span><span class="p">,</span> <span class="nx">_symbol</span><span class="p">,</span> <span class="nx">_decimals</span><span class="p">);</span> 
        <span class="p">})</span>

        <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the correct name</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">expect</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">name</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">_name</span><span class="p">)</span>
        <span class="p">})</span>
        
        <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the correct symbol</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">expect</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">symbol</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">_symbol</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">})</span>

<span class="p">})</span>

</code></pre></div></div>

<p>To run those tests, make sure you have Ganache running (<code class="language-plaintext highlighter-rouge">ganache-cli</code>) and run <code class="language-plaintext highlighter-rouge">truffle test</code>. Result should look like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Contract: BonkToken
    token attributes
✓ Transaction submitted successfully. Hash: 0xb04baef19503e3c4ff529e857b28045d50eb1461048a85d3f08686059f4a8318
      ✓ has the correct name
✓ Transaction submitted successfully. Hash: 0xd75e5bf01f7e3876f246a454c5fff3263f584a285f06f07b4c57896127313897
      ✓ has the correct symbol

  2 passing <span class="o">(</span>269ms<span class="o">)</span>
</code></pre></div></div>

<h2 id="extending-token">Extending token</h2>

<p>So just for practice I wanted to extend my token with decimals field as it is in tutorial. The difference is that I’m inheriting from ERC20 which has a only symbol and name parameters in constructor. ERC20 by default returns 18 for decimals.</p>

<p>So first things first, I’ve added tests which ofc failed. Extended test file should look like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">BonkToken</span> <span class="o">=</span> <span class="nx">artifacts</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">BonkToken</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">BN</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@openzeppelin/test-helpers</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">expect</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">contract</span><span class="p">(</span><span class="dl">'</span><span class="s1">BonkToken</span><span class="dl">'</span><span class="p">,</span> <span class="nx">accounts</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">_name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Bonk Token</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">_symbol</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">BNK</span><span class="dl">'</span><span class="p">;</span> 
    <span class="kd">const</span> <span class="nx">_decimals</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BN</span><span class="p">(</span><span class="mi">18</span><span class="p">);</span> 

    <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">token attributes</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

        <span class="nx">beforeEach</span><span class="p">(</span><span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">token</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">BonkToken</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="nx">_name</span><span class="p">,</span> <span class="nx">_symbol</span><span class="p">,</span> <span class="nx">_decimals</span><span class="p">);</span> 
        <span class="p">})</span>

        <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the correct name</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">expect</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">name</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">_name</span><span class="p">)</span>
        <span class="p">})</span>
        
        <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the correct symbol</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">expect</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">symbol</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">_symbol</span><span class="p">)</span>
        <span class="p">})</span>
        
        <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">has the correct decimals</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">expect</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">decimals</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">bignumber</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">_decimals</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">})</span>

<span class="p">})</span>
</code></pre></div></div>

<p>The next thing is to make some changes in BonkToken itself. Updated file:</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: MIT
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="mf">0.8</span><span class="p">.</span><span class="mi">13</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol"</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">BonkToken</span> <span class="k">is</span> <span class="n">ERC20</span><span class="p">{</span>

    <span class="kt">uint8</span> <span class="k">private</span> <span class="n">_decimals</span><span class="p">;</span> 

    <span class="k">constructor</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_name</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">_symbol</span><span class="p">,</span> <span class="kt">uint8</span> <span class="n">decimals_</span><span class="p">)</span> 
    <span class="n">ERC20</span><span class="p">(</span><span class="n">_name</span><span class="p">,</span> <span class="n">_symbol</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_decimals</span> <span class="o">=</span> <span class="n">decimals_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">decimals</span><span class="p">()</span> <span class="k">public</span> <span class="k">override</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">uint8</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">_decimals</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>I’ve added new parameter for BonkToken in constructor which will set contract property. Easy peasy</li>
  <li>In <a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20</a>, function decimals returns 18 by default. Since I wanted to have it parametrized (ofc. I will leave it 18 xd), I’ve simply override decimals function with returning _decimals parameter.</li>
</ul>

<h2 id="deploy-token-to-network">Deploy token to network</h2>

<p>To get access to truffle console, run <code class="language-plaintext highlighter-rouge">truffle console</code></p>

<p>Then in console:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>truffle<span class="o">(</span>development<span class="o">)&gt;</span> BonkToken.deployed<span class="o">(</span> <span class="o">)</span>.then<span class="o">((</span>t<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>token <span class="o">=</span> t<span class="o">})</span>
undefined
truffle<span class="o">(</span>development<span class="o">)&gt;</span> token.address
<span class="s1">'0x14213DC7023Daf74e2D063d305978b5bdadB3beD'</span>
truffle<span class="o">(</span>development<span class="o">)&gt;</span> token.name<span class="o">(</span> <span class="o">)</span>
<span class="s1">'Bonk Token'</span>
truffle<span class="o">(</span>development<span class="o">)&gt;</span> token.symbol<span class="o">(</span> <span class="o">)</span>
<span class="s1">'BNK'</span>
truffle<span class="o">(</span>development<span class="o">)&gt;</span> token.decimals<span class="o">(</span> <span class="o">)</span>
BN <span class="o">{</span> negative: 0, words: <span class="o">[</span> 18, &lt;1 empty item&gt; <span class="o">]</span>, length: 1, red: null <span class="o">}</span>
</code></pre></div></div>
:ET